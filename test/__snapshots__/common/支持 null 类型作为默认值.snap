/* eslint-disable */
// @ts-ignore
import * as API from './types';

export function displayStatusEnum(field: API.StatusEnum) {
  return { placed: 'placed', approved: 'approved', delivered: 'delivered' }[
    field
  ];
}

export function displayStatusEnum2(field: API.StatusEnum2) {
  return { available: 'available', pending: 'pending', sold: 'sold' }[field];
}
/* eslint-disable */
// @ts-ignore
export * from './types';
export * from './displayEnumLabel';

export * from './pet';
export * from './store';
export * from './user';
/* eslint-disable */
// @ts-ignore
import { request } from 'axios';

import * as API from './types';

/** Update an existing pet Update an existing pet by Id PUT /pet */
export async function petUsingPut({
  body,
  options,
}: {
  body: API.Pet;
  options?: { [key: string]: unknown };
}) {
  return request<API.Pet>('/pet', {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** Add a new pet to the store Add a new pet to the store POST /pet */
export async function petUsingPost({
  body,
  options,
}: {
  body: API.Pet;
  options?: { [key: string]: unknown };
}) {
  return request<API.Pet>('/pet', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** Find pet by ID Returns a single pet GET /pet/${param0} */
export async function petPetIdUsingGet({
  params,
  options,
}: {
  // 叠加生成的Param类型 (非body参数openapi默认没有生成对象)
  params: API.PetPetIdUsingGetParams;
  options?: { [key: string]: unknown };
}) {
  const { petId: param0, ...queryParams } = params;

  return request<API.Pet>(`/pet/${param0}`, {
    method: 'GET',
    params: { ...queryParams },
    ...(options || {}),
  });
}

/** Updates a pet in the store with form data POST /pet/${param0} */
export async function petPetIdUsingPost({
  params,
  options,
}: {
  // 叠加生成的Param类型 (非body参数openapi默认没有生成对象)
  params: API.PetPetIdUsingPostParams;
  options?: { [key: string]: unknown };
}) {
  const { petId: param0, ...queryParams } = params;

  return request<unknown>(`/pet/${param0}`, {
    method: 'POST',
    params: {
      ...queryParams,
    },
    ...(options || {}),
  });
}

/** Deletes a pet DELETE /pet/${param0} */
export async function petPetIdUsingDelete({
  params,
  options,
}: {
  // 叠加生成的Param类型 (非body参数openapi默认没有生成对象)
  params: API.PetPetIdUsingDeleteParams;
  options?: { [key: string]: unknown };
}) {
  const { petId: param0, ...queryParams } = params;

  return request<unknown>(`/pet/${param0}`, {
    method: 'DELETE',
    params: { ...queryParams },
    ...(options || {}),
  });
}

/** uploads an image POST /pet/${param0}/uploadImage */
export async function petPetIdUploadImageUsingPost({
  params,
  body,
  options,
}: {
  // 叠加生成的Param类型 (非body参数openapi默认没有生成对象)
  params: API.PetPetIdUploadImageUsingPostParams;
  body: API.PetPetIdUploadImageUsingPostBody;
  options?: { [key: string]: unknown };
}) {
  const { petId: param0, ...queryParams } = params;

  return request<API.ApiResponse>(`/pet/${param0}/uploadImage`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/octet-stream',
    },
    params: {
      ...queryParams,
    },
    data: body,
    ...(options || {}),
  });
}

/** Finds Pets by status Multiple status values can be provided with comma separated strings GET /pet/findByStatus */
export async function petFindByStatusUsingGet({
  params,
  options,
}: {
  // 叠加生成的Param类型 (非body参数openapi默认没有生成对象)
  params: API.PetFindByStatusUsingGetParams;
  options?: { [key: string]: unknown };
}) {
  return request<API.Pet[]>('/pet/findByStatus', {
    method: 'GET',
    params: {
      // status has a default value: available
      status: 'available',
      ...params,
    },
    ...(options || {}),
  });
}

/** Finds Pets by tags Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing. GET /pet/findByTags */
export async function petFindByTagsUsingGet({
  params,
  options,
}: {
  // 叠加生成的Param类型 (非body参数openapi默认没有生成对象)
  params: API.PetFindByTagsUsingGetParams;
  options?: { [key: string]: unknown };
}) {
  return request<API.Pet[]>('/pet/findByTags', {
    method: 'GET',
    params: {
      ...params,
    },
    ...(options || {}),
  });
}
/* eslint-disable */
// @ts-ignore
import { request } from 'axios';

import * as API from './types';

/** Returns pet inventories by status Returns a map of status codes to quantities GET /store/inventory */
export async function storeInventoryUsingGet({
  options,
}: {
  options?: { [key: string]: unknown };
}) {
  return request<Record<string, number>>('/store/inventory', {
    method: 'GET',
    ...(options || {}),
  });
}

/** Place an order for a pet Place a new order in the store POST /store/order */
export async function storeOrderUsingPost({
  body,
  options,
}: {
  body: API.Order;
  options?: { [key: string]: unknown };
}) {
  return request<API.Order>('/store/order', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** Find purchase order by ID For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions. GET /store/order/${param0} */
export async function storeOrderOrderIdUsingGet({
  params,
  options,
}: {
  // 叠加生成的Param类型 (非body参数openapi默认没有生成对象)
  params: API.StoreOrderOrderIdUsingGetParams;
  options?: { [key: string]: unknown };
}) {
  const { orderId: param0, ...queryParams } = params;

  return request<API.Order>(`/store/order/${param0}`, {
    method: 'GET',
    params: { ...queryParams },
    ...(options || {}),
  });
}

/** Delete purchase order by ID For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors DELETE /store/order/${param0} */
export async function storeOrderOrderIdUsingDelete({
  params,
  options,
}: {
  // 叠加生成的Param类型 (非body参数openapi默认没有生成对象)
  params: API.StoreOrderOrderIdUsingDeleteParams;
  options?: { [key: string]: unknown };
}) {
  const { orderId: param0, ...queryParams } = params;

  return request<unknown>(`/store/order/${param0}`, {
    method: 'DELETE',
    params: { ...queryParams },
    ...(options || {}),
  });
}
/* eslint-disable */
// @ts-ignore

export type ApiResponse = {
  code: number | null;
  type: string | null;
  message: string | null;
};

export type Category = {
  id: number | null;
  name: string | null;
};

export type Order = {
  id: number | null;
  petId: number | null;
  quantity: number | null;
  shipDate: string | null;
  /** Order Status */
  status: 'placed' | 'approved' | 'delivered' | null;
  complete: boolean | null;
};

export type Pet = {
  id: number | null;
  name: string;
  category: Category | null;
  photoUrls: string[];
  tags: Tag[] | null;
  /** pet status in the store */
  status: 'available' | 'pending' | 'sold' | null;
};

export type PetFindByStatusUsingGetParams = {
  /** Status values that need to be considered for filter */
  status: 'available' | 'pending' | 'sold' | null;
};

export type PetFindByStatusUsingGetResponses = {
  /**
   * successful operation
   */
  200: Pet[];
  /**
   * Invalid status value
   */
  400: unknown;
};

export type PetFindByTagsUsingGetParams = {
  /** Tags to filter by */
  tags: string[] | null;
};

export type PetFindByTagsUsingGetResponses = {
  /**
   * successful operation
   */
  200: Pet[];
  /**
   * Invalid tag value
   */
  400: unknown;
};

export type PetPetIdUploadImageUsingPostBody = string;

export type PetPetIdUploadImageUsingPostParams = {
  /** ID of pet to update */
  petId: number;
  /** Additional Metadata */
  additionalMetadata: string | null;
};

export type PetPetIdUploadImageUsingPostResponses = {
  /**
   * successful operation
   */
  200: ApiResponse;
};

export type PetPetIdUsingDeleteParams = {
  /** Pet id to delete */
  petId: number;
};

export type PetPetIdUsingDeleteResponses = {
  /**
   * Invalid pet value
   */
  400: unknown;
};

export type PetPetIdUsingGetParams = {
  /** ID of pet to return */
  petId: number;
};

export type PetPetIdUsingGetResponses = {
  /**
   * successful operation
   */
  200: Pet;
  /**
   * Invalid ID supplied
   */
  400: unknown;
  /**
   * Pet not found
   */
  404: unknown;
};

export type PetPetIdUsingPostParams = {
  /** ID of pet that needs to be updated */
  petId: number;
  /** Name of pet that needs to be updated */
  name: string | null;
  /** Status of pet that needs to be updated */
  status: string | null;
};

export type PetPetIdUsingPostResponses = {
  /**
   * Invalid input
   */
  405: unknown;
};

export type PetUsingPostResponses = {
  /**
   * Successful operation
   */
  200: Pet;
  /**
   * Invalid input
   */
  405: unknown;
};

export type PetUsingPutResponses = {
  /**
   * Successful operation
   */
  200: Pet;
  /**
   * Invalid ID supplied
   */
  400: unknown;
  /**
   * Pet not found
   */
  404: unknown;
  /**
   * Validation exception
   */
  405: unknown;
};

export enum StatusEnum {
  'placed' = 'placed',
  'approved' = 'approved',
  'delivered' = 'delivered',
}

export type IStatusEnum = keyof typeof StatusEnum;

export enum StatusEnum2 {
  'available' = 'available',
  'pending' = 'pending',
  'sold' = 'sold',
}

export type IStatusEnum2 = keyof typeof StatusEnum2;

export type StoreInventoryUsingGetResponses = {
  /**
   * successful operation
   */
  200: Record<string, number>;
};

export type StoreOrderOrderIdUsingDeleteParams = {
  /** ID of the order that needs to be deleted */
  orderId: number;
};

export type StoreOrderOrderIdUsingDeleteResponses = {
  /**
   * Invalid ID supplied
   */
  400: unknown;
  /**
   * Order not found
   */
  404: unknown;
};

export type StoreOrderOrderIdUsingGetParams = {
  /** ID of order that needs to be fetched */
  orderId: number;
};

export type StoreOrderOrderIdUsingGetResponses = {
  /**
   * successful operation
   */
  200: Order;
  /**
   * Invalid ID supplied
   */
  400: unknown;
  /**
   * Order not found
   */
  404: unknown;
};

export type StoreOrderUsingPostResponses = {
  /**
   * successful operation
   */
  200: Order;
  /**
   * Invalid input
   */
  405: unknown;
};

export type Tag = {
  id: number | null;
  name: string | null;
};

export type User = {
  id: number | null;
  username: string | null;
  firstName: string | null;
  lastName: string | null;
  email: string | null;
  password: string | null;
  phone: string | null;
  /** User Status */
  userStatus: number | null;
};

export type UserCreateWithListUsingPostBody = User[];

export type UserCreateWithListUsingPostResponses = {
  /**
   * Successful operation
   */
  200: User;
  /**
   * successful operation
   */
  default: unknown;
};

export type UserLoginUsingGetParams = {
  /** The user name for login */
  username: string | null;
  /** The password for login in clear text */
  password: string | null;
};

export type UserLoginUsingGetResponses = {
  /**
   * successful operation
   */
  200: string;
  /**
   * Invalid username/password supplied
   */
  400: unknown;
};

export type UserLogoutUsingGetResponses = {
  /**
   * successful operation
   */
  default: unknown;
};

export type UserUsernameUsingDeleteParams = {
  /** The name that needs to be deleted */
  username: string;
};

export type UserUsernameUsingDeleteResponses = {
  /**
   * Invalid username supplied
   */
  400: unknown;
  /**
   * User not found
   */
  404: unknown;
};

export type UserUsernameUsingGetParams = {
  /** The name that needs to be fetched. Use user1 for testing.  */
  username: string;
};

export type UserUsernameUsingGetResponses = {
  /**
   * successful operation
   */
  200: User;
  /**
   * Invalid username supplied
   */
  400: unknown;
  /**
   * User not found
   */
  404: unknown;
};

export type UserUsernameUsingPutParams = {
  /** name that needs to be updated */
  username: string;
};

export type UserUsernameUsingPutResponses = {
  /**
   * successful operation
   */
  default: unknown;
};

export type UserUsingPostResponses = {
  /**
   * successful operation
   */
  default: User;
};
/* eslint-disable */
// @ts-ignore
import { request } from 'axios';

import * as API from './types';

/** Create user This can only be done by the logged in user. 返回值: successful operation POST /user */
export async function userUsingPost({
  body,
  options,
}: {
  body: API.User;
  options?: { [key: string]: unknown };
}) {
  return request<API.User>('/user', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** Get user by user name GET /user/${param0} */
export async function userUsernameUsingGet({
  params,
  options,
}: {
  // 叠加生成的Param类型 (非body参数openapi默认没有生成对象)
  params: API.UserUsernameUsingGetParams;
  options?: { [key: string]: unknown };
}) {
  const { username: param0, ...queryParams } = params;

  return request<API.User>(`/user/${param0}`, {
    method: 'GET',
    params: { ...queryParams },
    ...(options || {}),
  });
}

/** Update user This can only be done by the logged in user. 返回值: successful operation PUT /user/${param0} */
export async function userUsernameUsingPut({
  params,
  body,
  options,
}: {
  // 叠加生成的Param类型 (非body参数openapi默认没有生成对象)
  params: API.UserUsernameUsingPutParams;
  body: API.User;
  options?: { [key: string]: unknown };
}) {
  const { username: param0, ...queryParams } = params;

  return request<unknown>(`/user/${param0}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    params: { ...queryParams },
    data: body,
    ...(options || {}),
  });
}

/** Delete user This can only be done by the logged in user. DELETE /user/${param0} */
export async function userUsernameUsingDelete({
  params,
  options,
}: {
  // 叠加生成的Param类型 (非body参数openapi默认没有生成对象)
  params: API.UserUsernameUsingDeleteParams;
  options?: { [key: string]: unknown };
}) {
  const { username: param0, ...queryParams } = params;

  return request<unknown>(`/user/${param0}`, {
    method: 'DELETE',
    params: { ...queryParams },
    ...(options || {}),
  });
}

/** Creates list of users with given input array Creates list of users with given input array 返回值: successful operation POST /user/createWithList */
export async function userCreateWithListUsingPost({
  body,
  options,
}: {
  body: API.UserCreateWithListUsingPostBody;
  options?: { [key: string]: unknown };
}) {
  return request<unknown>('/user/createWithList', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** Logs user into the system GET /user/login */
export async function userLoginUsingGet({
  params,
  options,
}: {
  // 叠加生成的Param类型 (非body参数openapi默认没有生成对象)
  params: API.UserLoginUsingGetParams;
  options?: { [key: string]: unknown };
}) {
  return request<string>('/user/login', {
    method: 'GET',
    params: {
      ...params,
    },
    ...(options || {}),
  });
}

/** Logs out current logged in user session 返回值: successful operation GET /user/logout */
export async function userLogoutUsingGet({
  options,
}: {
  options?: { [key: string]: unknown };
}) {
  return request<unknown>('/user/logout', {
    method: 'GET',
    ...(options || {}),
  });
}
