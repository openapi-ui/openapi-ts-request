/* eslint-disable */
// @ts-ignore
import * as API from './types';

export function displayStatusEnum(field: API.StatusEnum) {
  return { available: 'available', pending: 'pending', sold: 'sold' }[field];
}
/* eslint-disable */
// @ts-ignore
export * from './types';
export * from './displayEnumLabel';

export * from './pet';
/* eslint-disable */
// @ts-ignore
import { request } from 'axios';

import * as API from './types';

/** Update an existing pet Update an existing pet by Id PUT /pet */
export async function petUsingPut({
  body,
  options,
}: {
  body: API.Pet;
  options?: { [key: string]: unknown };
}) {
  return request<API.Pet>('/pet', {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** Add a new pet to the store Add a new pet to the store POST /pet */
export async function petUsingPost({
  body,
  options,
}: {
  body: API.Pet;
  options?: { [key: string]: unknown };
}) {
  return request<API.Pet>('/pet', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    data: body,
    ...(options || {}),
  });
}

/** Find pet by ID Returns a single pet GET /pet/${param0} */
export async function petPetIdUsingGet({
  params,
  options,
}: {
  // 叠加生成的Param类型 (非body参数openapi默认没有生成对象)
  params: API.PetPetIdUsingGetParams;
  options?: { [key: string]: unknown };
}) {
  const { petId: param0, ...queryParams } = params;

  return request<API.Pet>(`/pet/${param0}`, {
    method: 'GET',
    params: { ...queryParams },
    ...(options || {}),
  });
}

/** Updates a pet in the store with form data POST /pet/${param0} */
export async function petPetIdUsingPost({
  params,
  options,
}: {
  // 叠加生成的Param类型 (非body参数openapi默认没有生成对象)
  params: API.PetPetIdUsingPostParams;
  options?: { [key: string]: unknown };
}) {
  const { petId: param0, ...queryParams } = params;

  return request<unknown>(`/pet/${param0}`, {
    method: 'POST',
    params: {
      ...queryParams,
    },
    ...(options || {}),
  });
}

/** Deletes a pet DELETE /pet/${param0} */
export async function petPetIdUsingDelete({
  params,
  options,
}: {
  // 叠加生成的Param类型 (非body参数openapi默认没有生成对象)
  params: API.PetPetIdUsingDeleteParams;
  options?: { [key: string]: unknown };
}) {
  const { petId: param0, ...queryParams } = params;

  return request<unknown>(`/pet/${param0}`, {
    method: 'DELETE',
    params: { ...queryParams },
    ...(options || {}),
  });
}

/** uploads an image POST /pet/${param0}/uploadImage */
export async function petPetIdUploadImageUsingPost({
  params,
  body,
  options,
}: {
  // 叠加生成的Param类型 (非body参数openapi默认没有生成对象)
  params: API.PetPetIdUploadImageUsingPostParams;
  body: API.PetPetIdUploadImageUsingPostBody;
  options?: { [key: string]: unknown };
}) {
  const { petId: param0, ...queryParams } = params;

  return request<API.ApiResponse>(`/pet/${param0}/uploadImage`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/octet-stream',
    },
    params: {
      ...queryParams,
    },
    data: body,
    ...(options || {}),
  });
}

/** Finds Pets by status Multiple status values can be provided with comma separated strings GET /pet/findByStatus */
export async function petFindByStatusUsingGet({
  params,
  options,
}: {
  // 叠加生成的Param类型 (非body参数openapi默认没有生成对象)
  params: API.PetFindByStatusUsingGetParams;
  options?: { [key: string]: unknown };
}) {
  return request<API.Pet[]>('/pet/findByStatus', {
    method: 'GET',
    params: {
      // status has a default value: available
      status: 'available',
      ...params,
    },
    ...(options || {}),
  });
}

/** Finds Pets by tags Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing. GET /pet/findByTags */
export async function petFindByTagsUsingGet({
  params,
  options,
}: {
  // 叠加生成的Param类型 (非body参数openapi默认没有生成对象)
  params: API.PetFindByTagsUsingGetParams;
  options?: { [key: string]: unknown };
}) {
  return request<API.Pet[]>('/pet/findByTags', {
    method: 'GET',
    params: {
      ...params,
    },
    ...(options || {}),
  });
}
/* eslint-disable */
// @ts-ignore

export type ApiResponse = {
  code?: number;
  type?: string;
  message?: string;
};

export type Category = {
  id?: number;
  name?: string;
};

export type Pet = {
  id?: number;
  name: string;
  category?: Category;
  photoUrls: string[];
  tags?: Tag[];
  /** pet status in the store */
  status?: 'available' | 'pending' | 'sold';
};

export type PetFindByStatusUsingGetParams = {
  /** Status values that need to be considered for filter */
  status?: 'available' | 'pending' | 'sold';
};

export type PetFindByStatusUsingGetResponses = {
  /**
   * successful operation
   */
  200: Pet[];
  /**
   * Invalid status value
   */
  400: unknown;
};

export type PetFindByTagsUsingGetParams = {
  /** Tags to filter by */
  tags?: string[];
};

export type PetFindByTagsUsingGetResponses = {
  /**
   * successful operation
   */
  200: Pet[];
  /**
   * Invalid tag value
   */
  400: unknown;
};

export type PetPetIdUploadImageUsingPostBody = string;

export type PetPetIdUploadImageUsingPostParams = {
  /** ID of pet to update */
  petId: number;
  /** Additional Metadata */
  additionalMetadata?: string;
};

export type PetPetIdUploadImageUsingPostResponses = {
  /**
   * successful operation
   */
  200: ApiResponse;
};

export type PetPetIdUsingDeleteParams = {
  /** Pet id to delete */
  petId: number;
};

export type PetPetIdUsingDeleteResponses = {
  /**
   * Invalid pet value
   */
  400: unknown;
};

export type PetPetIdUsingGetParams = {
  /** ID of pet to return */
  petId: number;
};

export type PetPetIdUsingGetResponses = {
  /**
   * successful operation
   */
  200: Pet;
  /**
   * Invalid ID supplied
   */
  400: unknown;
  /**
   * Pet not found
   */
  404: unknown;
};

export type PetPetIdUsingPostParams = {
  /** ID of pet that needs to be updated */
  petId: number;
  /** Name of pet that needs to be updated */
  name?: string;
  /** Status of pet that needs to be updated */
  status?: string;
};

export type PetPetIdUsingPostResponses = {
  /**
   * Invalid input
   */
  405: unknown;
};

export type PetUsingPostResponses = {
  /**
   * Successful operation
   */
  200: Pet;
  /**
   * Invalid input
   */
  405: unknown;
};

export type PetUsingPutResponses = {
  /**
   * Successful operation
   */
  200: Pet;
  /**
   * Invalid ID supplied
   */
  400: unknown;
  /**
   * Pet not found
   */
  404: unknown;
  /**
   * Validation exception
   */
  405: unknown;
};

export enum StatusEnum {
  'available' = 'available',
  'pending' = 'pending',
  'sold' = 'sold',
}

export type IStatusEnum = keyof typeof StatusEnum;

export type Tag = {
  id?: number;
  name?: string;
};
